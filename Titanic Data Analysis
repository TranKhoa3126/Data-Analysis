{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b601e5ab",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:05.116259Z",
     "iopub.status.busy": "2022-07-21T17:18:05.115783Z",
     "iopub.status.idle": "2022-07-21T17:18:05.135280Z",
     "shell.execute_reply": "2022-07-21T17:18:05.133932Z"
    },
    "papermill": {
     "duration": 0.034269,
     "end_time": "2022-07-21T17:18:05.138319",
     "exception": false,
     "start_time": "2022-07-21T17:18:05.104050",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/train.csv\n",
      "/kaggle/input/titanic/test.csv\n",
      "/kaggle/input/titanic/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d5fd7836",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:05.157744Z",
     "iopub.status.busy": "2022-07-21T17:18:05.156905Z",
     "iopub.status.idle": "2022-07-21T17:18:06.417606Z",
     "shell.execute_reply": "2022-07-21T17:18:06.416578Z"
    },
    "papermill": {
     "duration": 1.273341,
     "end_time": "2022-07-21T17:18:06.420371",
     "exception": false,
     "start_time": "2022-07-21T17:18:05.147030",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "plt.style.use(\"ggplot\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0174de09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:06.440087Z",
     "iopub.status.busy": "2022-07-21T17:18:06.438918Z",
     "iopub.status.idle": "2022-07-21T17:18:06.472532Z",
     "shell.execute_reply": "2022-07-21T17:18:06.471290Z"
    },
    "papermill": {
     "duration": 0.04644,
     "end_time": "2022-07-21T17:18:06.475262",
     "exception": false,
     "start_time": "2022-07-21T17:18:06.428822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "trainData = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\n",
    "testData = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\n",
    "submissionExample = pd.read_csv(\"/kaggle/input/titanic/gender_submission.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7b3a5aee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:06.494578Z",
     "iopub.status.busy": "2022-07-21T17:18:06.493592Z",
     "iopub.status.idle": "2022-07-21T17:18:06.511487Z",
     "shell.execute_reply": "2022-07-21T17:18:06.510643Z"
    },
    "papermill": {
     "duration": 0.029562,
     "end_time": "2022-07-21T17:18:06.513627",
     "exception": false,
     "start_time": "2022-07-21T17:18:06.484065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [PassengerId, Survived]\n",
       "Index: []"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submissionExample.head(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e0cd0382",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:06.532664Z",
     "iopub.status.busy": "2022-07-21T17:18:06.531932Z",
     "iopub.status.idle": "2022-07-21T17:18:06.536955Z",
     "shell.execute_reply": "2022-07-21T17:18:06.536113Z"
    },
    "papermill": {
     "duration": 0.01719,
     "end_time": "2022-07-21T17:18:06.539180",
     "exception": false,
     "start_time": "2022-07-21T17:18:06.521990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def missingPercent(data):\n",
    "    missingData = (data.isnull().mean()*100).sort_values(ascending=False)\n",
    "    return missingData[missingData>0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4db90c91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:06.558085Z",
     "iopub.status.busy": "2022-07-21T17:18:06.557365Z",
     "iopub.status.idle": "2022-07-21T17:18:06.569728Z",
     "shell.execute_reply": "2022-07-21T17:18:06.568443Z"
    },
    "papermill": {
     "duration": 0.024604,
     "end_time": "2022-07-21T17:18:06.572180",
     "exception": false,
     "start_time": "2022-07-21T17:18:06.547576",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of nan entries in training data:\n",
      "Cabin       77.104377\n",
      "Age         19.865320\n",
      "Embarked     0.224467\n",
      "dtype: float64\n",
      "\n",
      "Percentage of nan entries in testing data:\n",
      "Cabin    78.229665\n",
      "Age      20.574163\n",
      "Fare      0.239234\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(\"Percentage of nan entries in training data:\")\n",
    "print(missingPercent(trainData))\n",
    "print(\"\\nPercentage of nan entries in testing data:\")\n",
    "print(missingPercent(testData))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "51bd2a23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:06.592590Z",
     "iopub.status.busy": "2022-07-21T17:18:06.591582Z",
     "iopub.status.idle": "2022-07-21T17:18:06.598956Z",
     "shell.execute_reply": "2022-07-21T17:18:06.597748Z"
    },
    "papermill": {
     "duration": 0.020627,
     "end_time": "2022-07-21T17:18:06.601597",
     "exception": false,
     "start_time": "2022-07-21T17:18:06.580970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data's features: Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
      "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Testing data's features: Index(['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch',\n",
      "       'Ticket', 'Fare', 'Cabin', 'Embarked'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(f\"Training data's features: {trainData.columns}\")\n",
    "print(f\"\\n\\nTesting data's features: {testData.columns}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "31a20214",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:06.622436Z",
     "iopub.status.busy": "2022-07-21T17:18:06.621559Z",
     "iopub.status.idle": "2022-07-21T17:18:06.641312Z",
     "shell.execute_reply": "2022-07-21T17:18:06.639813Z"
    },
    "papermill": {
     "duration": 0.033755,
     "end_time": "2022-07-21T17:18:06.644180",
     "exception": false,
     "start_time": "2022-07-21T17:18:06.610425",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trainData.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e977f0c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:06.664670Z",
     "iopub.status.busy": "2022-07-21T17:18:06.664279Z",
     "iopub.status.idle": "2022-07-21T17:18:06.673056Z",
     "shell.execute_reply": "2022-07-21T17:18:06.671974Z"
    },
    "papermill": {
     "duration": 0.022067,
     "end_time": "2022-07-21T17:18:06.675831",
     "exception": false,
     "start_time": "2022-07-21T17:18:06.653764",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      int64\n",
       "Survived         int64\n",
       "Pclass           int64\n",
       "Name            object\n",
       "Sex             object\n",
       "Age            float64\n",
       "SibSp            int64\n",
       "Parch            int64\n",
       "Ticket          object\n",
       "Fare           float64\n",
       "Cabin           object\n",
       "Embarked        object\n",
       "dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trainData.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "353d3523",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:06.695690Z",
     "iopub.status.busy": "2022-07-21T17:18:06.695299Z",
     "iopub.status.idle": "2022-07-21T17:18:06.710044Z",
     "shell.execute_reply": "2022-07-21T17:18:06.709146Z"
    },
    "papermill": {
     "duration": 0.027885,
     "end_time": "2022-07-21T17:18:06.712798",
     "exception": false,
     "start_time": "2022-07-21T17:18:06.684913",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "trainData.columns = trainData.columns.str.lower()\n",
    "testData.columns = testData.columns.str.lower()\n",
    "\n",
    "trainData.drop(\"passengerid\",axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f5d14236",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:06.734376Z",
     "iopub.status.busy": "2022-07-21T17:18:06.733299Z",
     "iopub.status.idle": "2022-07-21T17:18:07.577786Z",
     "shell.execute_reply": "2022-07-21T17:18:07.576833Z"
    },
    "papermill": {
     "duration": 0.857569,
     "end_time": "2022-07-21T17:18:07.580142",
     "exception": false,
     "start_time": "2022-07-21T17:18:06.722573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "trainData.hist(figsize=(10,10))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6842c644",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:07.601515Z",
     "iopub.status.busy": "2022-07-21T17:18:07.601014Z",
     "iopub.status.idle": "2022-07-21T17:18:08.019191Z",
     "shell.execute_reply": "2022-07-21T17:18:08.018232Z"
    },
    "papermill": {
     "duration": 0.432154,
     "end_time": "2022-07-21T17:18:08.021853",
     "exception": false,
     "start_time": "2022-07-21T17:18:07.589699",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def corrPlot(data):\n",
    "    plt.figure(figsize=(10,10))\n",
    "    sns.heatmap(data.corr(), annot=True, cmap=\"viridis\")\n",
    "    plt.show()\n",
    "    return\n",
    "\n",
    "corrPlot(trainData)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3ef78fb",
   "metadata": {
    "papermill": {
     "duration": 0.01112,
     "end_time": "2022-07-21T17:18:08.043882",
     "exception": false,
     "start_time": "2022-07-21T17:18:08.032762",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Questions\n",
    "* What sex had the highest survival percentage?\n",
    "* What class had the highest survival percentage?\n",
    "* What age had the highest survival percentage?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7dccf0cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:08.068372Z",
     "iopub.status.busy": "2022-07-21T17:18:08.067557Z",
     "iopub.status.idle": "2022-07-21T17:18:08.087238Z",
     "shell.execute_reply": "2022-07-21T17:18:08.085433Z"
    },
    "papermill": {
     "duration": 0.035658,
     "end_time": "2022-07-21T17:18:08.090553",
     "exception": false,
     "start_time": "2022-07-21T17:18:08.054895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:1: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pclass</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>survived</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.531876</td>\n",
       "      <td>30.626179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.950292</td>\n",
       "      <td>28.343690</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            pclass        age\n",
       "survived                     \n",
       "0         2.531876  30.626179\n",
       "1         1.950292  28.343690"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trainData.groupby(\"survived\")[\"pclass\",\"age\"].mean()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3ae551ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:08.113970Z",
     "iopub.status.busy": "2022-07-21T17:18:08.113408Z",
     "iopub.status.idle": "2022-07-21T17:18:08.986548Z",
     "shell.execute_reply": "2022-07-21T17:18:08.985307Z"
    },
    "papermill": {
     "duration": 0.88832,
     "end_time": "2022-07-21T17:18:08.989569",
     "exception": false,
     "start_time": "2022-07-21T17:18:08.101249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax=plt.subplots(nrows=1,figsize=(8,6))\n",
    "sns.countplot(x='survived' ,hue='sex', data=trainData)\n",
    "ax.set_ylim(0,500)\n",
    "plt.title(\"Survived vs Sex\")\n",
    "plt.show()\n",
    "\n",
    "fig, ax=plt.subplots(nrows=1,figsize=(8,6))\n",
    "sns.countplot(x='survived' ,hue='pclass', data=trainData)\n",
    "ax.set_ylim(0,400)\n",
    "plt.title(\"Survived vs Pclass\")\n",
    "plt.show()\n",
    "\n",
    "fig, ax=plt.subplots(nrows=1,figsize=(8,6))\n",
    "sns.countplot(x=\"survived\",hue=\"embarked\",data=trainData)\n",
    "ax.set_ylim(0,500)\n",
    "plt.title(\"Survived vs Embarked\")\n",
    "plt.show()\n",
    "\n",
    "fig, ax=plt.subplots(nrows=1,figsize=(8,6))\n",
    "sns.boxenplot(x=\"survived\",y=\"age\",data=trainData)\n",
    "plt.title(\"Survived vs Age\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02fbacce",
   "metadata": {
    "papermill": {
     "duration": 0.014332,
     "end_time": "2022-07-21T17:18:09.016612",
     "exception": false,
     "start_time": "2022-07-21T17:18:09.002280",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Insights obtain from plots:\n",
    "* Females were more likely to survive than males\n",
    "* 1st class individuals were more likely to survive\n",
    "* Individuals from Southhampton were more likely to die. Perhaps due to the area being not as wealthy.\n",
    "* Some outliers are present for age, although they may not be too significant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0f0f82d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:09.044830Z",
     "iopub.status.busy": "2022-07-21T17:18:09.044329Z",
     "iopub.status.idle": "2022-07-21T17:18:09.056056Z",
     "shell.execute_reply": "2022-07-21T17:18:09.054033Z"
    },
    "papermill": {
     "duration": 0.029883,
     "end_time": "2022-07-21T17:18:09.059891",
     "exception": false,
     "start_time": "2022-07-21T17:18:09.030008",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of unique tickets: 76.43%\n",
      "Percentage of missing values for cabin feature: 77.10%\n"
     ]
    }
   ],
   "source": [
    "missingCabin = missingPercent(trainData)[\"cabin\"]\n",
    "\n",
    "print(f\"Percentage of unique tickets: {len(trainData.ticket.unique())/trainData.shape[0]*100:.2f}%\")\n",
    "print(f\"Percentage of missing values for cabin feature: {missingCabin:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "468784c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:09.086548Z",
     "iopub.status.busy": "2022-07-21T17:18:09.085543Z",
     "iopub.status.idle": "2022-07-21T17:18:09.104251Z",
     "shell.execute_reply": "2022-07-21T17:18:09.103250Z"
    },
    "papermill": {
     "duration": 0.034864,
     "end_time": "2022-07-21T17:18:09.107041",
     "exception": false,
     "start_time": "2022-07-21T17:18:09.072177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passengerid</th>\n",
       "      <th>pclass</th>\n",
       "      <th>name</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>sibsp</th>\n",
       "      <th>parch</th>\n",
       "      <th>ticket</th>\n",
       "      <th>fare</th>\n",
       "      <th>cabin</th>\n",
       "      <th>embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   passengerid  pclass                                          name     sex  \\\n",
       "0          892       3                              Kelly, Mr. James    male   \n",
       "1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n",
       "2          894       2                     Myles, Mr. Thomas Francis    male   \n",
       "3          895       3                              Wirz, Mr. Albert    male   \n",
       "4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n",
       "\n",
       "    age  sibsp  parch   ticket     fare cabin embarked  \n",
       "0  34.5      0      0   330911   7.8292   NaN        Q  \n",
       "1  47.0      1      0   363272   7.0000   NaN        S  \n",
       "2  62.0      0      0   240276   9.6875   NaN        Q  \n",
       "3  27.0      0      0   315154   8.6625   NaN        S  \n",
       "4  22.0      1      1  3101298  12.2875   NaN        S  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "testData.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9e750edc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:09.135928Z",
     "iopub.status.busy": "2022-07-21T17:18:09.135520Z",
     "iopub.status.idle": "2022-07-21T17:18:09.144349Z",
     "shell.execute_reply": "2022-07-21T17:18:09.142980Z"
    },
    "papermill": {
     "duration": 0.026698,
     "end_time": "2022-07-21T17:18:09.146942",
     "exception": false,
     "start_time": "2022-07-21T17:18:09.120244",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Since many values are missing for cabin, the feature will be dropped\n",
    "# Ticket will also be dropped as there are many unique values that has no encompassing similarities\n",
    "trainData.drop([\"cabin\",\"ticket\"],axis=1,inplace=True)\n",
    "testData.drop([\"cabin\",\"ticket\"],axis=1,inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9254088b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:09.174617Z",
     "iopub.status.busy": "2022-07-21T17:18:09.173897Z",
     "iopub.status.idle": "2022-07-21T17:18:09.186130Z",
     "shell.execute_reply": "2022-07-21T17:18:09.183271Z"
    },
    "papermill": {
     "duration": 0.031658,
     "end_time": "2022-07-21T17:18:09.191000",
     "exception": false,
     "start_time": "2022-07-21T17:18:09.159342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "combine = [trainData, testData]\n",
    "for df in combine:\n",
    "    df[\"title\"] = df[\"name\"].str.extract(' ([A-Za-z]+)\\.', expand=False) #uses the syntax of regex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "da054561",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:09.222934Z",
     "iopub.status.busy": "2022-07-21T17:18:09.222001Z",
     "iopub.status.idle": "2022-07-21T17:18:09.249524Z",
     "shell.execute_reply": "2022-07-21T17:18:09.247924Z"
    },
    "papermill": {
     "duration": 0.04544,
     "end_time": "2022-07-21T17:18:09.252251",
     "exception": false,
     "start_time": "2022-07-21T17:18:09.206811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>sex</th>\n",
       "      <th>female</th>\n",
       "      <th>male</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Capt</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Col</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Countess</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Don</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dr</th>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jonkheer</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lady</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Major</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Master</th>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Miss</th>\n",
       "      <td>182</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mlle</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mme</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mr</th>\n",
       "      <td>0</td>\n",
       "      <td>517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mrs</th>\n",
       "      <td>125</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ms</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rev</th>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sir</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "sex       female  male\n",
       "title                 \n",
       "Capt           0     1\n",
       "Col            0     2\n",
       "Countess       1     0\n",
       "Don            0     1\n",
       "Dr             1     6\n",
       "Jonkheer       0     1\n",
       "Lady           1     0\n",
       "Major          0     2\n",
       "Master         0    40\n",
       "Miss         182     0\n",
       "Mlle           2     0\n",
       "Mme            1     0\n",
       "Mr             0   517\n",
       "Mrs          125     0\n",
       "Ms             1     0\n",
       "Rev            0     6\n",
       "Sir            0     1"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Observe that there are rare titles, such as [mme, mlle, jonkheer]\n",
    "pd.crosstab(trainData.title,trainData.sex)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdfa3689",
   "metadata": {
    "papermill": {
     "duration": 0.012464,
     "end_time": "2022-07-21T17:18:09.277141",
     "exception": false,
     "start_time": "2022-07-21T17:18:09.264677",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Replacing some rare titles with terms more familiar in meaning, as well as renaming other rare titles to \"Rare\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9f793629",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:09.307586Z",
     "iopub.status.busy": "2022-07-21T17:18:09.306036Z",
     "iopub.status.idle": "2022-07-21T17:18:09.323785Z",
     "shell.execute_reply": "2022-07-21T17:18:09.322794Z"
    },
    "papermill": {
     "duration": 0.035724,
     "end_time": "2022-07-21T17:18:09.326317",
     "exception": false,
     "start_time": "2022-07-21T17:18:09.290593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mr        517\n",
       "Miss      185\n",
       "Mrs       126\n",
       "Master     40\n",
       "Rare       23\n",
       "Name: title, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "common_titles = ['Master', 'Mr', 'Miss', 'Mrs']\n",
    "\n",
    "for df in combine:\n",
    "    df['title'] = df['title'].replace('Mlle', 'Miss')\n",
    "    df['title'] = df['title'].replace('Ms', 'Miss')\n",
    "    df['title'] = df['title'].replace('Mme', 'Mrs')\n",
    "    df['title'] = [x if x in common_titles else 'Rare' for x in df['title']]\n",
    "\n",
    "trainData.title.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b9e0834d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:09.353926Z",
     "iopub.status.busy": "2022-07-21T17:18:09.352667Z",
     "iopub.status.idle": "2022-07-21T17:18:09.370241Z",
     "shell.execute_reply": "2022-07-21T17:18:09.369295Z"
    },
    "papermill": {
     "duration": 0.034017,
     "end_time": "2022-07-21T17:18:09.372905",
     "exception": false,
     "start_time": "2022-07-21T17:18:09.338888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Encode columns\n",
    "for df in combine:\n",
    "    df['sex'] = df['sex'].map({'female': 0, 'male': 1})\n",
    "    \n",
    "title_dummies = pd.get_dummies(trainData['title'], prefix = 'Title', drop_first = True)\n",
    "trainData = pd.concat([trainData.drop('title', axis = 1), title_dummies], axis = 1)\n",
    "\n",
    "title_dummies = pd.get_dummies(testData['title'], prefix = 'Title', drop_first = True)\n",
    "testData = pd.concat([testData.drop('title', axis = 1), title_dummies], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b6cc4e36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:09.400380Z",
     "iopub.status.busy": "2022-07-21T17:18:09.398730Z",
     "iopub.status.idle": "2022-07-21T17:18:09.409772Z",
     "shell.execute_reply": "2022-07-21T17:18:09.408571Z"
    },
    "papermill": {
     "duration": 0.027139,
     "end_time": "2022-07-21T17:18:09.412290",
     "exception": false,
     "start_time": "2022-07-21T17:18:09.385151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "combine = [trainData,testData]\n",
    "for df in combine:\n",
    "    df[\"familySize\"] = df[\"sibsp\"]+df[\"parch\"] \n",
    "    df[\"familySize\"] = df[\"familySize\"].apply(lambda x: x+1) # +1 to include the individual themselves\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "645edb32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:09.441155Z",
     "iopub.status.busy": "2022-07-21T17:18:09.440135Z",
     "iopub.status.idle": "2022-07-21T17:18:09.449002Z",
     "shell.execute_reply": "2022-07-21T17:18:09.447677Z"
    },
    "papermill": {
     "duration": 0.026436,
     "end_time": "2022-07-21T17:18:09.452067",
     "exception": false,
     "start_time": "2022-07-21T17:18:09.425631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "trainData = trainData.drop(['name', 'sibsp', 'parch'], axis = 1)\n",
    "testData = testData.drop(['name', 'sibsp', 'parch'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d25f3af7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:09.479132Z",
     "iopub.status.busy": "2022-07-21T17:18:09.478408Z",
     "iopub.status.idle": "2022-07-21T17:18:09.491313Z",
     "shell.execute_reply": "2022-07-21T17:18:09.490318Z"
    },
    "papermill": {
     "duration": 0.029274,
     "end_time": "2022-07-21T17:18:09.493786",
     "exception": false,
     "start_time": "2022-07-21T17:18:09.464512",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pclass</th>\n",
       "      <td>0.369226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>familySize</th>\n",
       "      <td>0.301914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Title_Miss</th>\n",
       "      <td>0.277827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Title_Mr</th>\n",
       "      <td>0.206341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Title_Rare</th>\n",
       "      <td>0.194639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Title_Mrs</th>\n",
       "      <td>0.178069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fare</th>\n",
       "      <td>0.096067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sex</th>\n",
       "      <td>0.093254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>survived</th>\n",
       "      <td>0.077221</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 age\n",
       "age         1.000000\n",
       "pclass      0.369226\n",
       "familySize  0.301914\n",
       "Title_Miss  0.277827\n",
       "Title_Mr    0.206341\n",
       "Title_Rare  0.194639\n",
       "Title_Mrs   0.178069\n",
       "fare        0.096067\n",
       "sex         0.093254\n",
       "survived    0.077221"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check correlation of age with other variables to perform imputation\n",
    "pd.DataFrame(trainData.corr().abs()[\"age\"].sort_values(ascending=False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9d0241e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-07-21T17:18:09.521414Z",
     "iopub.status.busy": "2022-07-21T17:18:09.520960Z",
     "iopub.status.idle": "2022-07-21T17:18:09.526015Z",
     "shell.execute_reply": "2022-07-21T17:18:09.525037Z"
    },
    "papermill": {
     "duration": 0.021945,
     "end_time": "2022-07-21T17:18:09.528361",
     "exception": false,
     "start_time": "2022-07-21T17:18:09.506416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Impute age based on pclass\n",
    "combine = [trainData,testData]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c80e8b27",
   "metadata": {
    "papermill": {
     "duration": 0.012388,
     "end_time": "2022-07-21T17:18:09.554675",
     "exception": false,
     "start_time": "2022-07-21T17:18:09.542287",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "024a9074",
   "metadata": {
    "papermill": {
     "duration": 0.013927,
     "end_time": "2022-07-21T17:18:09.581329",
     "exception": false,
     "start_time": "2022-07-21T17:18:09.567402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 17.06947,
   "end_time": "2022-07-21T17:18:10.519054",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-07-21T17:17:53.449584",
   "version": "2.3.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
